// <auto-generated />
using System;
using Gestionale.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Gestionale.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4");

            modelBuilder.Entity("Gestionale.Data.Corso", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AnnoAccademico")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AnnoFineCorso")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AnnoInizioCorso")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Sede")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Corsi");
                });

            modelBuilder.Entity("Gestionale.Data.Dipendente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Assunzione")
                        .HasColumnType("TEXT");

                    b.Property<string>("Categoria")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cognome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("CorsiId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DataNascita")
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Dipendente");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Dipendente");
                });

            modelBuilder.Entity("Gestionale.Data.Esame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DataEsame")
                        .HasColumnType("TEXT");

                    b.Property<int>("ModuliId")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("Punteggio")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("ModuliId");

                    b.ToTable("Esami");
                });

            modelBuilder.Entity("Gestionale.Data.Iscrizione", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CorsiId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DataIscrizione")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CorsiId");

                    b.ToTable("Iscrizioni");
                });

            modelBuilder.Entity("Gestionale.Data.Modulo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CorsiId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DataFine")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataInizio")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DipendenteId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("InsegnanteId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Materia")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("TutorId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CorsiId");

                    b.HasIndex("DipendenteId");

                    b.HasIndex("InsegnanteId");

                    b.HasIndex("TutorId");

                    b.ToTable("Moduli");
                });

            modelBuilder.Entity("Gestionale.Data.Partecipante", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AnnoDiploma")
                        .HasColumnType("TEXT");

                    b.Property<string>("Citta")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Cognome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("CorsiId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DataNascita")
                        .HasColumnType("TEXT");

                    b.Property<string>("Diploma")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Indirizzo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("IscrizioneId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CorsiId");

                    b.HasIndex("IscrizioneId");

                    b.ToTable("Partecipanti");
                });

            modelBuilder.Entity("Gestionale.Data.Punteggio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EsameId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PartecipanteId")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("Voto")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("EsameId");

                    b.HasIndex("PartecipanteId");

                    b.ToTable("Punteggi");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Gestionale.Data.Coordinatore", b =>
                {
                    b.HasBaseType("Gestionale.Data.Dipendente");

                    b.HasIndex("CorsiId");

                    b.HasDiscriminator().HasValue("Coordinatore");
                });

            modelBuilder.Entity("Gestionale.Data.Insegnante", b =>
                {
                    b.HasBaseType("Gestionale.Data.Dipendente");

                    b.HasIndex("CorsiId")
                        .HasName("IX_Dipendente_CorsiId1");

                    b.HasDiscriminator().HasValue("Insegnante");
                });

            modelBuilder.Entity("Gestionale.Data.Tutor", b =>
                {
                    b.HasBaseType("Gestionale.Data.Dipendente");

                    b.HasIndex("CorsiId")
                        .HasName("IX_Dipendente_CorsiId2");

                    b.HasDiscriminator().HasValue("Tutor");
                });

            modelBuilder.Entity("Gestionale.Data.Esame", b =>
                {
                    b.HasOne("Gestionale.Data.Modulo", "Moduli")
                        .WithMany("Esami")
                        .HasForeignKey("ModuliId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gestionale.Data.Iscrizione", b =>
                {
                    b.HasOne("Gestionale.Data.Corso", "Corsi")
                        .WithMany("Iscrizioni")
                        .HasForeignKey("CorsiId");
                });

            modelBuilder.Entity("Gestionale.Data.Modulo", b =>
                {
                    b.HasOne("Gestionale.Data.Corso", "Corsi")
                        .WithMany("Moduli")
                        .HasForeignKey("CorsiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gestionale.Data.Dipendente", null)
                        .WithMany("Moduli")
                        .HasForeignKey("DipendenteId");

                    b.HasOne("Gestionale.Data.Insegnante", "Insegnanti")
                        .WithMany()
                        .HasForeignKey("InsegnanteId");

                    b.HasOne("Gestionale.Data.Tutor", "Tutor")
                        .WithMany()
                        .HasForeignKey("TutorId");
                });

            modelBuilder.Entity("Gestionale.Data.Partecipante", b =>
                {
                    b.HasOne("Gestionale.Data.Corso", "Corsi")
                        .WithMany("Partecipanti")
                        .HasForeignKey("CorsiId");

                    b.HasOne("Gestionale.Data.Iscrizione", "Iscrizione")
                        .WithMany("Partecipanti")
                        .HasForeignKey("IscrizioneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gestionale.Data.Punteggio", b =>
                {
                    b.HasOne("Gestionale.Data.Esame", "Esami")
                        .WithMany("Punteggi")
                        .HasForeignKey("EsameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gestionale.Data.Partecipante", "Partecipanti")
                        .WithMany("Punteggi")
                        .HasForeignKey("PartecipanteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gestionale.Data.Coordinatore", b =>
                {
                    b.HasOne("Gestionale.Data.Corso", "Corsi")
                        .WithMany("Coordinatori")
                        .HasForeignKey("CorsiId");
                });

            modelBuilder.Entity("Gestionale.Data.Insegnante", b =>
                {
                    b.HasOne("Gestionale.Data.Corso", "Corsi")
                        .WithMany("Insegnanti")
                        .HasForeignKey("CorsiId")
                        .HasConstraintName("FK_Dipendente_Corsi_CorsiId1");
                });

            modelBuilder.Entity("Gestionale.Data.Tutor", b =>
                {
                    b.HasOne("Gestionale.Data.Corso", "Corsi")
                        .WithMany("Tutor")
                        .HasForeignKey("CorsiId")
                        .HasConstraintName("FK_Dipendente_Corsi_CorsiId2");
                });
#pragma warning restore 612, 618
        }
    }
}
