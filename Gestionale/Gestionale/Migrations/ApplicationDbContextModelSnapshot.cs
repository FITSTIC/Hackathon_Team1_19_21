// <auto-generated />
using System;
using Gestionale.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Gestionale.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4");

            modelBuilder.Entity("Gestionale.Data.Corsi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AnnoAccademico")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AnnoFineCorso")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AnnoInizioCorso")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Sede")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Corsi");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AnnoAccademico = "21/23",
                            AnnoFineCorso = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AnnoInizioCorso = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Alan Turing",
                            Sede = "Cesena"
                        },
                        new
                        {
                            Id = 2,
                            AnnoAccademico = "21/23",
                            AnnoFineCorso = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AnnoInizioCorso = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Marshall McLuhan",
                            Sede = "Bologna"
                        },
                        new
                        {
                            Id = 3,
                            AnnoAccademico = "21/23",
                            AnnoFineCorso = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AnnoInizioCorso = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Grace Hopper",
                            Sede = "Modena"
                        },
                        new
                        {
                            Id = 4,
                            AnnoAccademico = "21/23",
                            AnnoFineCorso = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AnnoInizioCorso = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Product Manager Fashion",
                            Sede = "Carpi"
                        },
                        new
                        {
                            Id = 5,
                            AnnoAccademico = "21/23",
                            AnnoFineCorso = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AnnoInizioCorso = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Expert Mixed Reality",
                            Sede = "Casalecchio"
                        });
                });

            modelBuilder.Entity("Gestionale.Data.Esami", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DataEsame")
                        .HasColumnType("TEXT");

                    b.Property<int>("ModuliId")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("Punteggio")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("ModuliId");

                    b.ToTable("Esami");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DataEsame = new DateTime(2021, 2, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModuliId = 5
                        },
                        new
                        {
                            Id = 2,
                            DataEsame = new DateTime(2021, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModuliId = 4
                        },
                        new
                        {
                            Id = 3,
                            DataEsame = new DateTime(2021, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModuliId = 3
                        },
                        new
                        {
                            Id = 4,
                            DataEsame = new DateTime(2021, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModuliId = 2
                        },
                        new
                        {
                            Id = 5,
                            DataEsame = new DateTime(2021, 3, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModuliId = 1
                        });
                });

            modelBuilder.Entity("Gestionale.Data.Iscrizioni", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CorsiId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DataIscrizione")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CorsiId");

                    b.ToTable("Iscrizioni");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CorsiId = 4,
                            DataIscrizione = new DateTime(2020, 6, 9, 14, 40, 34, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CorsiId = 5,
                            DataIscrizione = new DateTime(2020, 6, 9, 14, 40, 34, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            CorsiId = 1,
                            DataIscrizione = new DateTime(2020, 6, 9, 14, 40, 34, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            CorsiId = 3,
                            DataIscrizione = new DateTime(2020, 6, 9, 14, 40, 34, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            CorsiId = 2,
                            DataIscrizione = new DateTime(2020, 6, 9, 14, 40, 34, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Gestionale.Data.Moduli", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CorsiId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DataFine")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataInizio")
                        .HasColumnType("TEXT");

                    b.Property<string>("Materia")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("PersonaleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CorsiId");

                    b.HasIndex("PersonaleId");

                    b.ToTable("Moduli");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CorsiId = 1,
                            DataFine = new DateTime(2021, 3, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataInizio = new DateTime(2021, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Materia = "Programmazione OOP",
                            PersonaleId = 11
                        },
                        new
                        {
                            Id = 2,
                            CorsiId = 2,
                            DataFine = new DateTime(2021, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataInizio = new DateTime(2021, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Materia = "C#",
                            PersonaleId = 1
                        },
                        new
                        {
                            Id = 3,
                            CorsiId = 3,
                            DataFine = new DateTime(2021, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataInizio = new DateTime(2021, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Materia = "Inglese",
                            PersonaleId = 5
                        },
                        new
                        {
                            Id = 4,
                            CorsiId = 4,
                            DataFine = new DateTime(2021, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataInizio = new DateTime(2021, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Materia = "Lavorare in team",
                            PersonaleId = 12
                        },
                        new
                        {
                            Id = 5,
                            CorsiId = 5,
                            DataFine = new DateTime(2021, 2, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataInizio = new DateTime(2021, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Materia = "Relazione con il Cliente",
                            PersonaleId = 15
                        });
                });

            modelBuilder.Entity("Gestionale.Data.Partecipanti", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AnnoDiploma")
                        .HasColumnType("TEXT");

                    b.Property<string>("Citta")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Cognome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("CorsiId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DataNascita")
                        .HasColumnType("TEXT");

                    b.Property<string>("Diploma")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("EsamiId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Indirizzo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("IscrizioniId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CorsiId");

                    b.HasIndex("EsamiId");

                    b.HasIndex("IscrizioniId");

                    b.ToTable("Partecipanti");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AnnoDiploma = new DateTime(2010, 6, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Citta = "Cesena",
                            Cognome = "Polo",
                            CorsiId = 1,
                            DataNascita = new DateTime(2010, 6, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Diploma = "Tecnico",
                            Email = "MarcoPolo@gmail.com",
                            Indirizzo = "Via Polo 29°",
                            IscrizioniId = 3,
                            Nome = "Marco",
                            Telefono = "3338614937"
                        },
                        new
                        {
                            Id = 2,
                            AnnoDiploma = new DateTime(2016, 6, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Citta = "Bologna",
                            Cognome = "Venere",
                            CorsiId = 2,
                            DataNascita = new DateTime(1995, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Diploma = "Sociale",
                            Email = "GiorgiaVenere@gmail.com",
                            Indirizzo = "Via Venere 219°",
                            IscrizioniId = 5,
                            Nome = "Giorgia",
                            Telefono = "3338895937"
                        },
                        new
                        {
                            Id = 3,
                            AnnoDiploma = new DateTime(2019, 6, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Citta = "Rimini",
                            Cognome = "Deandrè",
                            CorsiId = 3,
                            DataNascita = new DateTime(2000, 8, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Diploma = "Tecnico",
                            Email = "LuigiDeandè@gmail.com",
                            Indirizzo = "Via Deandè 5°",
                            IscrizioniId = 4,
                            Nome = "Luigi",
                            Telefono = "3338678437"
                        },
                        new
                        {
                            Id = 4,
                            AnnoDiploma = new DateTime(2018, 6, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Citta = "Forlì",
                            Cognome = "Pane",
                            CorsiId = 4,
                            DataNascita = new DateTime(1999, 8, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Diploma = "Tecnico",
                            Email = "MartaPane@gmail.com",
                            Indirizzo = "Via Pane 15°",
                            IscrizioniId = 1,
                            Nome = "Marta",
                            Telefono = "3458684937"
                        },
                        new
                        {
                            Id = 5,
                            AnnoDiploma = new DateTime(2017, 6, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Citta = "Faenza",
                            Cognome = "Telo",
                            CorsiId = 5,
                            DataNascita = new DateTime(1998, 8, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Diploma = "Tecnico",
                            Email = "GiorgiaTelo@gmail.com",
                            Indirizzo = "Via Telo 78°",
                            IscrizioniId = 2,
                            Nome = "Giorgia",
                            Telefono = "3338614937"
                        });
                });

            modelBuilder.Entity("Gestionale.Data.Personale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Assunzione")
                        .HasColumnType("TEXT");

                    b.Property<string>("Categoria")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cognome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("CorsiId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DataNascita")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CorsiId");

                    b.ToTable("Personale");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Assunzione = new DateTime(2020, 6, 9, 14, 40, 34, 0, DateTimeKind.Unspecified),
                            Categoria = "Coordinatore",
                            Cognome = "Frasulli",
                            CorsiId = 1,
                            DataNascita = new DateTime(1989, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "MatteoFrasulli@gmail.com",
                            Nome = "Matteo",
                            Telefono = "3458614787"
                        },
                        new
                        {
                            Id = 2,
                            Assunzione = new DateTime(2020, 6, 9, 14, 40, 34, 0, DateTimeKind.Unspecified),
                            Categoria = "Coordinatore",
                            Cognome = "Grud",
                            CorsiId = 2,
                            DataNascita = new DateTime(1988, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "PaolaGrud@gmail.com",
                            Nome = "Paola",
                            Telefono = "3458775787"
                        },
                        new
                        {
                            Id = 3,
                            Assunzione = new DateTime(2020, 6, 9, 14, 40, 34, 0, DateTimeKind.Unspecified),
                            Categoria = "Coordinatore",
                            Cognome = "Stella",
                            CorsiId = 3,
                            DataNascita = new DateTime(1987, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "GiorgiaStella@gmail.com",
                            Nome = "Giorgia",
                            Telefono = "3458618787"
                        },
                        new
                        {
                            Id = 4,
                            Assunzione = new DateTime(2020, 6, 9, 14, 40, 34, 0, DateTimeKind.Unspecified),
                            Categoria = "Coordinatore",
                            Cognome = "Dadi",
                            CorsiId = 4,
                            DataNascita = new DateTime(1989, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "DarioDadi@gmail.com",
                            Nome = "Dario",
                            Telefono = "3457914787"
                        },
                        new
                        {
                            Id = 5,
                            Assunzione = new DateTime(2020, 6, 9, 14, 40, 34, 0, DateTimeKind.Unspecified),
                            Categoria = "Coordinatore",
                            Cognome = "Raro",
                            CorsiId = 5,
                            DataNascita = new DateTime(1990, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "MattiaRaro@gmail.com",
                            Nome = "Mattia",
                            Telefono = "3458614787"
                        },
                        new
                        {
                            Id = 6,
                            Assunzione = new DateTime(2020, 6, 9, 14, 40, 34, 0, DateTimeKind.Unspecified),
                            Categoria = "Tutor",
                            Cognome = "Giuseppa",
                            CorsiId = 1,
                            DataNascita = new DateTime(1989, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "MauroGiuseppa@gmail.com",
                            Nome = "Mauro",
                            Telefono = "3228614787"
                        },
                        new
                        {
                            Id = 7,
                            Assunzione = new DateTime(2020, 6, 9, 14, 40, 34, 0, DateTimeKind.Unspecified),
                            Categoria = "Tutor",
                            Cognome = "Frafra",
                            CorsiId = 2,
                            DataNascita = new DateTime(1989, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "GiuliaFrafra@gmail.com",
                            Nome = "Giulia",
                            Telefono = "3248614787"
                        },
                        new
                        {
                            Id = 8,
                            Assunzione = new DateTime(2020, 6, 9, 14, 40, 34, 0, DateTimeKind.Unspecified),
                            Categoria = "Tutor",
                            Cognome = "Del Mio",
                            CorsiId = 3,
                            DataNascita = new DateTime(1989, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "CarmineDelMio@gmail.com",
                            Nome = "Carmine",
                            Telefono = "3278614787"
                        },
                        new
                        {
                            Id = 9,
                            Assunzione = new DateTime(2020, 6, 9, 14, 40, 34, 0, DateTimeKind.Unspecified),
                            Categoria = "Tutor",
                            Cognome = "Del Capo",
                            CorsiId = 4,
                            DataNascita = new DateTime(1989, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "FrancescaDelCapo@gmail.com",
                            Nome = "Francesca",
                            Telefono = "3298614787"
                        },
                        new
                        {
                            Id = 10,
                            Assunzione = new DateTime(2020, 6, 9, 14, 40, 34, 0, DateTimeKind.Unspecified),
                            Categoria = "Tutor",
                            Cognome = "Ortè",
                            CorsiId = 5,
                            DataNascita = new DateTime(1989, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "AlessandroOrtè@gmail.com",
                            Nome = "Alessandro",
                            Telefono = "3258614787"
                        },
                        new
                        {
                            Id = 11,
                            Assunzione = new DateTime(2020, 6, 9, 14, 40, 34, 0, DateTimeKind.Unspecified),
                            Categoria = "Insegnante",
                            Cognome = "Telepatia",
                            CorsiId = 1,
                            DataNascita = new DateTime(1979, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "RosaliaTelepatia@gmail.com",
                            Nome = "Rosalia",
                            Telefono = "3278614787"
                        },
                        new
                        {
                            Id = 12,
                            Assunzione = new DateTime(2020, 6, 9, 14, 40, 34, 0, DateTimeKind.Unspecified),
                            Categoria = "Insegnante",
                            Cognome = "De'Martino",
                            CorsiId = 2,
                            DataNascita = new DateTime(1979, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "AlessandroDeMartino@gmail.com",
                            Nome = "Alessandro",
                            Telefono = "3258174787"
                        },
                        new
                        {
                            Id = 13,
                            Assunzione = new DateTime(2020, 6, 9, 14, 40, 34, 0, DateTimeKind.Unspecified),
                            Categoria = "Insegnante",
                            Cognome = "Martin",
                            CorsiId = 3,
                            DataNascita = new DateTime(1990, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "SaraMartin@gmail.com",
                            Nome = "Sara",
                            Telefono = "3258614977"
                        },
                        new
                        {
                            Id = 14,
                            Assunzione = new DateTime(2020, 6, 9, 14, 40, 34, 0, DateTimeKind.Unspecified),
                            Categoria = "Insegnante",
                            Cognome = "Terra",
                            CorsiId = 4,
                            DataNascita = new DateTime(1988, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "MarcoTerra@gmail.com",
                            Nome = "Marco",
                            Telefono = "3258610787"
                        },
                        new
                        {
                            Id = 15,
                            Assunzione = new DateTime(2020, 6, 9, 14, 40, 34, 0, DateTimeKind.Unspecified),
                            Categoria = "Insegnante",
                            Cognome = "Rosa",
                            CorsiId = 5,
                            DataNascita = new DateTime(1987, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "FrancescaRosa@gmail.com",
                            Nome = "Francesca",
                            Telefono = "3258414787"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Gestionale.Data.Esami", b =>
                {
                    b.HasOne("Gestionale.Data.Moduli", "Moduli")
                        .WithMany("Esami")
                        .HasForeignKey("ModuliId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gestionale.Data.Iscrizioni", b =>
                {
                    b.HasOne("Gestionale.Data.Corsi", "Corsi")
                        .WithMany()
                        .HasForeignKey("CorsiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gestionale.Data.Moduli", b =>
                {
                    b.HasOne("Gestionale.Data.Corsi", "Corsi")
                        .WithMany("Moduli")
                        .HasForeignKey("CorsiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gestionale.Data.Personale", "Personale")
                        .WithMany("Moduli")
                        .HasForeignKey("PersonaleId");
                });

            modelBuilder.Entity("Gestionale.Data.Partecipanti", b =>
                {
                    b.HasOne("Gestionale.Data.Corsi", "Corsi")
                        .WithMany("Partecipanti")
                        .HasForeignKey("CorsiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gestionale.Data.Esami", "Esami")
                        .WithMany("Partecipanti")
                        .HasForeignKey("EsamiId");

                    b.HasOne("Gestionale.Data.Iscrizioni", "Iscrizioni")
                        .WithMany("Partecipanti")
                        .HasForeignKey("IscrizioniId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gestionale.Data.Personale", b =>
                {
                    b.HasOne("Gestionale.Data.Corsi", "Corsi")
                        .WithMany("Personale")
                        .HasForeignKey("CorsiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
